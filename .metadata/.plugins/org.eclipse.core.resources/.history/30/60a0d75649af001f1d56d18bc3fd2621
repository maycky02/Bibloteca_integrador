package com.trilce.Bibloteca.servicios;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.trilce.Bibloteca.Entidades.Prestamo;
import com.trilce.Bibloteca.Entidades.Reserva;
import com.trilce.Bibloteca.Entidades.Usuario;
import com.trilce.Bibloteca.repositorio.LibroRepository;
import com.trilce.Bibloteca.repositorio.PrestamoRepository;
import com.trilce.Bibloteca.repositorio.ReservaRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PrestamoService {

    private final PrestamoRepository prestamoRepository;
    private final LibroRepository libroRepository;  // Repositorio de libros
    private final SancionService sancionService;    // Servicio de sanciones
    private final ReservaRepository reservaRepository;    // Repositorio de reservas

    // Enum para los estados del préstamo
    public enum EstadoPrestamo {
        ACTIVO, DEVUELTO
    }

    // Método para devolver un préstamo
    public boolean devolverPrestamo(Long prestamoId) {
        // Buscar el préstamo
        Prestamo prestamo = prestamoRepository.findById(prestamoId)
            .orElseThrow(() -> new IllegalArgumentException("Préstamo no encontrado"));

        // Verificar estado actual
        if (EstadoPrestamo.ACTIVO != prestamo.getEstado()) {
            throw new IllegalStateException("El préstamo ya ha sido devuelto o no está activo.");
        }

        // Verificar si fue devuelto tarde
        boolean devueltoTarde = LocalDate.now().isAfter(prestamo.getFechaDevolucion());
        prestamo.setDevueltoTarde(devueltoTarde);

        // Cambiar estado a "Devuelto"
        prestamo.setEstado(EstadoPrestamo.DEVUELTO);
        prestamoRepository.save(prestamo);

        // Si fue devuelto tarde, aplicar sanción
        if (devueltoTarde) {
            Usuario usuario = prestamo.getUsuario();
            sancionService.aplicarSancion(usuario);
        }

        // Actualizar el stock del libro
        if (prestamo.getLibro() != null) {
            prestamo.getLibro().setStock(prestamo.getLibro().getStock() + 1);
            libroRepository.save(prestamo.getLibro());
        }

        return devueltoTarde; // Retorna si la devolución fue tarde
    }

    // Listar todos los préstamos
    public List<Prestamo> listarPrestamos() {
        return prestamoRepository.findAll();  // Devuelve todos los préstamos registrados
    }

    // Listar préstamos vencidos
    public List<Prestamo> listarPrestamosVencidos() {
        return prestamoRepository.findAll().stream()
            .filter(prestamo -> prestamo.getFechaDevolucion().isBefore(LocalDate.now()) && EstadoPrestamo.DEVUELTO != prestamo.getEstado())
            .collect(Collectors.toList());
    }

    // Registrar un préstamo
    public void registrarPrestamo(Prestamo prestamo) {
        String dniUsuario = prestamo.getUsuario().getDni();
        
        // Verificar si el usuario tiene una sanción activa
        if (sancionService.tieneSancionActiva(dniUsuario)) {
            throw new IllegalStateException("No puede realizar préstamos. Usted está sancionado.");
        }

        // Guardar el préstamo en la base de datos
        prestamoRepository.save(prestamo);
    }

    // Actualizar un préstamo existente
    public Prestamo actualizarPrestamo(Prestamo prestamo) {
        return prestamoRepository.save(prestamo);  // Guardar y devolver el préstamo actualizado
    }
    
    // Método para buscar un préstamo por ID
    public Optional<Prestamo> buscarPrestamoPorId(Long id) {
        return prestamoRepository.findById(id);
    }

    // Crear un préstamo desde una reserva
    public void crearPrestamoDesdeReserva(Long reservaId) {
        // Buscar la reserva en la base de datos
        Reserva reserva = reservaRepository.findById(reservaId)
            .orElseThrow(() -> new IllegalArgumentException("Reserva no encontrada"));

        // Crear un nuevo préstamo basado en la reserva
        Prestamo prestamo = new Prestamo();
        prestamo.setLibro(reserva.getLibro());
        prestamo.setUsuario(reserva.getUsuario());
        prestamo.setFechaPrestamo(LocalDate.now());
        prestamo.setFechaDevolucion(LocalDate.now().plusWeeks(1));  // Prestamo por una semana
        prestamo.setEstado(EstadoPrestamo.ACTIVO.name());  // Convertir el Enum a String usando name()

        // Guardar el préstamo en la base de datos
        prestamoRepository.save(prestamo);
    }

}
