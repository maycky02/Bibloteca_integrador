package com.trilce.Bibloteca.servicios;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.trilce.Bibloteca.Entidades.Libro;
import com.trilce.Bibloteca.Entidades.Prestamo;
import com.trilce.Bibloteca.repositorio.LibroRepository;
import com.trilce.Bibloteca.repositorio.PrestamoRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PrestamoService {

    private final PrestamoRepository prestamoRepository;
    private final LibroRepository libroRepository;  // Repositorio de libros
    private final SancionService sancionService;    // Servicio de sanciones

    // Registrar devolución de un préstamo
    public void registrarDevolucion(Long id) {
        Prestamo prestamo = prestamoRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Préstamo no encontrado"));

        // Verificar si el préstamo ya fue devuelto
        if (!"Activo".equals(prestamo.getEstado())) {
            throw new IllegalStateException("El préstamo ya fue devuelto.");
        }

        // Actualizar el estado del préstamo a "Devuelto"
        prestamo.setEstado("Devuelto");
        prestamoRepository.save(prestamo);

        // Incrementar el stock del libro
        Libro libro = prestamo.getLibro();
        libro.setStock(libro.getStock() + 1);
        libroRepository.save(libro);  // Guardar el libro actualizado
    }

    // Listar todos los préstamos
    public List<Prestamo> listarTodos() {
        return prestamoRepository.findAll();  // Devuelve todos los préstamos registrados
    }

    public List<Prestamo> listarPrestamosVencidos() {
        // Filtrar los préstamos vencidos (estado no "Devuelto" y fechaDevolucion pasada)
        return prestamoRepository.findAll().stream()
            .filter(prestamo -> prestamo.getFechaDevolucion().isBefore(LocalDate.now()) && !"Devuelto".equals(prestamo.getEstado()))
            .collect(Collectors.toList());
    }


    // Registrar un préstamo
    public void registrarPrestamo(Prestamo prestamo) {
        String dniUsuario = prestamo.getUsuario().getDni();
        
        // Verificar si el usuario tiene una sanción activa
        if (sancionService.tieneSancionActiva(dniUsuario)) {
            throw new IllegalStateException("No puede realizar préstamos. Usted está sancionado.");
        }

        // Guardar el préstamo en la base de datos
        prestamoRepository.save(prestamo);
    }

    // Actualizar un préstamo existente
    public Prestamo actualizarPrestamo(Prestamo prestamo) {
        // Guardar y devolver el préstamo actualizado
        return prestamoRepository.save(prestamo);
    }
    
    // Método para buscar un préstamo por ID
    public Optional<Prestamo> buscarPrestamoPorId(Long id) {
        return prestamoRepository.findById(id);
    }
}
