package com.trilce.Bibloteca.controladores;

import java.security.Principal;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import com.trilce.Bibloteca.Entidades.Libro;
import com.trilce.Bibloteca.Entidades.Reserva;
import com.trilce.Bibloteca.Entidades.Sancion;
import com.trilce.Bibloteca.Entidades.Usuario;
import com.trilce.Bibloteca.repositorio.UsuarioRepository;
import com.trilce.Bibloteca.servicios.LibroService;
import com.trilce.Bibloteca.servicios.ReservaService;
import com.trilce.Bibloteca.servicios.SancionService;
import com.trilce.Bibloteca.servicios.UsuarioService;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/lector")
@RequiredArgsConstructor
public class LectorController {

    private final LibroService libroService;
    private final ReservaService reservaService;
    private final UsuarioRepository usuarioRepository;
    private final SancionService sancionService;
    private final UsuarioService usuarioService;

    // Método para verificar si el usuario está sancionado
    private boolean verificarSancion(Usuario usuario, Model model) {
        Long usuarioId = usuario.getId();

        // Obtener la sanción activa para el usuario
        Sancion sancion = sancionService.obtenerSancionActiva(usuarioId);

        if (sancion != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            String mensaje = "No puedes realizar una reserva hasta el " + sancion.getFechaFin().format(formatter);
            model.addAttribute("sancionMensaje", mensaje);
            return true; // Usuario sancionado
        }

        return false; // Usuario no sancionado
    }

    // Método para listar el catálogo de libros
    @GetMapping("/catalogo")
    public String listarCatalogo(Model model) {
        List<Libro> libros = libroService.listarLibros();
        model.addAttribute("libros", libros);

        // Obtener el correo del usuario logueado
        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String correoUsuario = user.getUsername();

        // Buscar al usuario por correo
        Usuario usuario = usuarioRepository.findByCorreo(correoUsuario)
                .orElseThrow(() -> new IllegalArgumentException("Usuario no encontrado"));

        // Verificar si el usuario está sancionado
        if (verificarSancion(usuario, model)) {
            // Si está sancionado, retornar a la vista con el mensaje de sanción
            return "lector/catalogo";
        }

        return "lector/catalogo"; // Retornar la vista 'catalogo.html' si el usuario no está sancionado
    }

    // Método para reservar un libro
    @GetMapping("/reservar/{id}")
    public String reservarLibro(@PathVariable Long id, Model model) {
        // Obtener el libro por su ID
        Libro libro = libroService.buscarLibroPorId(id)
                .orElseThrow(() -> new IllegalArgumentException("Libro no encontrado"));

        // Obtener el correo del usuario logueado
        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String correoUsuario = user.getUsername();

        // Buscar al usuario por correo
        Usuario usuario = usuarioRepository.findByCorreo(correoUsuario)
                .orElseThrow(() -> new IllegalArgumentException("Usuario no encontrado"));

        // Verificar si el usuario está sancionado
        if (verificarSancion(usuario, model)) {
            // Si está sancionado, no permitir realizar la reserva
            return "lector/catalogo"; // Redirigir a catálogo con el mensaje de sanción
        }

        // Si no está sancionado, proceder con la reserva
        Reserva nuevaReserva = new Reserva();
        nuevaReserva.setLibro(libro);
        nuevaReserva.setUsuario(usuario);

        // Guardar la reserva utilizando el servicio
        reservaService.reservarLibro(nuevaReserva);

        // Agregar la reserva al modelo
        model.addAttribute("reserva", nuevaReserva);
        model.addAttribute("success", "Reserva realizada correctamente");

        // Redirige a la página de confirmación
        return "lector/reserva_confirmada";
    }
    @GetMapping("/historial")
    public String verHistorialReservas(Model model, Principal principal) {
        String dni = obtenerDNIUsuarioLogeado(principal); // Implementa cómo obtener el DNI del lector logueado

        if (dni == null || dni.isEmpty()) {
            model.addAttribute("errorMensaje", "No se pudo identificar al usuario logueado.");
            return "lector/error"; // Redirige a una página de error personalizada
        }

        List<Reserva> reservas = reservaService.listarReservas().stream()
            .filter(reserva -> reserva.getUsuario() != null && reserva.getUsuario().getDni().equals(dni))
            .collect(Collectors.toList());

        if (reservas.isEmpty()) {
            model.addAttribute("mensaje", "No tienes reservas registradas.");
        } else {
            model.addAttribute("reservas", reservas);
        }

        return "lector/historial"; // Asegúrate de que esta plantilla exista
    }

    private String obtenerDNIUsuarioLogeado(Principal principal) {
        if (principal != null) {
            Usuario usuario = usuarioService.obtenerPorEmail(principal.getName()); // Ajusta según tu lógica
            return usuario != null ? usuario.getDni() : null;
        }
        return null;
    }

	}

}
