package com.trilce.Bibloteca.servicios;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.trilce.Bibloteca.Entidades.Libro;
import com.trilce.Bibloteca.repositorio.LibroRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class LibroService {

    private final LibroRepository libroRepository;

    // Método para manejar la carga de imágenes y agregar el libro
    public Libro agregarLibro(Libro libro, MultipartFile archivoImagen) throws IOException {
        if (archivoImagen != null && !archivoImagen.isEmpty()) {
            // Validar el tipo de archivo (opcional, dependiendo de los requisitos)
            String tipoArchivo = archivoImagen.getContentType();
            if (!tipoArchivo.startsWith("image/")) {
                throw new IllegalArgumentException("El archivo no es una imagen válida");
            }

            // Generar un nombre único para la imagen
            String nombreImagen = UUID.randomUUID().toString() + "_" + archivoImagen.getOriginalFilename();

            // Directorio de destino para las imágenes
            Path rutaDirectorio = Paths.get("src/main/resources/static/imagenes");

            // Verificar si el directorio existe, si no lo crea
            if (!Files.exists(rutaDirectorio)) {
                Files.createDirectories(rutaDirectorio);
            }

            // Ruta completa del archivo de imagen
            Path rutaImagen = rutaDirectorio.resolve(nombreImagen);

            // Guardar el archivo en el directorio
            Files.copy(archivoImagen.getInputStream(), rutaImagen, StandardCopyOption.REPLACE_EXISTING);

            // Asignar el nombre de la imagen al libro
            libro.setImagen(nombreImagen);
        }

        // Guardar el libro en la base de datos
        return libroRepository.save(libro);
    }
}

    // Método de edición, si es necesario
    public Libro editarLibro(Long id, Libro libroActualizado) {
        Libro libro = libroRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Libro no encontrado"));
        libro.setTitulo(libroActualizado.getTitulo());
        libro.setAutor(libroActualizado.getAutor());
        libro.setFechaPublicacion(libroActualizado.getFechaPublicacion());
        libro.setGenero(libroActualizado.getGenero());
        libro.setSinopsis(libroActualizado.getSinopsis());
        libro.setIsbn(libroActualizado.getIsbn());
        libro.setStock(libroActualizado.getStock());
        return libroRepository.save(libro);
    }

    public void eliminarLibro(Long id) {
        if (!libroRepository.existsById(id)) {
            throw new IllegalArgumentException("Libro no encontrado");
        }
        libroRepository.deleteById(id);
    }

    public List<Libro> listarLibros() {
        return libroRepository.findAll();
    }

    public Optional<Libro> buscarLibroPorId(Long id) {
        return libroRepository.findById(id);
    }

    public void actualizarLibro(Libro libro) {
        libroRepository.save(libro);
    }

    public Libro obtenerLibro(Long id) {
        return libroRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Libro no encontrado con ID: " + id));
    }

    public List<Libro> obtenerTodosLosLibros() {
        return libroRepository.findAll();
    }
}
