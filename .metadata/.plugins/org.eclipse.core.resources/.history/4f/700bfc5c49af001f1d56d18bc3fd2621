package com.trilce.Bibloteca.controladores;



@Controller
@RequestMapping("/admin/prestamos")
@RequiredArgsConstructor
public class PrestamoController {

    private final PrestamoService prestamoService;
    private final LibroService libroService;

    // Mostrar lista de préstamos
    @GetMapping
    public String listarPrestamos(Model model) {
        List<Prestamo> prestamos = prestamoService.listarPrestamos();
        model.addAttribute("prestamos", prestamos);  // Pasamos los préstamos al modelo
        return "admin/prestamos"; // Nombre de la vista
    }

    // Acción para devolver un préstamo
    @PostMapping("/{id}/devolver")
    public String devolverPrestamo(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            // Lógica para devolver el préstamo
            boolean devueltoTarde = prestamoService.devolverPrestamo(id);

            // Si fue devuelto tarde, añadir un mensaje de advertencia
            if (devueltoTarde) {
                redirectAttributes.addFlashAttribute("mensaje", "Devolución tardía. Se aplicará una sanción.");
            } else {
                // Si no fue devuelto tarde, actualizar el stock del libro
                Prestamo prestamo = prestamoService.obtenerPrestamoPorId(id); // Obtener el préstamo actualizado
                Libro libro = prestamo.getLibro();
                libro.setStock(libro.getStock() + 1); // Aumenta el stock en 1
                libroService.actualizarLibro(libro); // Actualizamos el libro en la base de datos

                redirectAttributes.addFlashAttribute("mensajeExito", "Libro devuelto con éxito.");
            }

            return "redirect:/admin/prestamos"; // Redirigir a la lista de préstamos
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("mensaje", "Error al devolver el préstamo: " + e.getMessage());
            return "redirect:/admin/prestamos"; // Redirigir a la lista de préstamos con mensaje de error
        }
    }
}
