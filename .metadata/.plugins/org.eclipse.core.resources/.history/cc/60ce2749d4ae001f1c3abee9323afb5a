package com.trilce.Bibloteca.servicios;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.trilce.Bibloteca.Entidades.Libro;
import com.trilce.Bibloteca.Entidades.Reserva;
import com.trilce.Bibloteca.repositorio.LibroRepository;
import com.trilce.Bibloteca.repositorio.ReservaRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ReservaService {

    private final ReservaRepository reservaRepository;
    private final LibroRepository libroRepository;  // Asegúrate de tener este repositorio
    
    // Aprobar una reserva
    private final PrestamoService prestamoService; // Inyección de dependencia

    public void aprobarReserva(Long id) {
        Reserva reserva = reservaRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Reserva no encontrada"));

        if ("Aprobada".equals(reserva.getEstado())) {
            throw new IllegalStateException("La reserva ya fue aprobada.");
        }

        // Cambiar estado de reserva
        reserva.setEstado("Aprobada");
        reservaRepository.save(reserva);

        // Crear un nuevo préstamo
        Prestamo prestamo = new Prestamo();
        prestamo.setLibro(reserva.getLibro());
        prestamo.setUsuario(reserva.getUsuario());
        prestamo.setFechaPrestamo(LocalDate.now());
        prestamo.setFechaDevolucion(LocalDate.now().plusDays(7)); // Plazo de 7 días
        prestamo.setEstado("Activo");
        prestamoService.registrarPrestamo(prestamo);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

 // Método para reservar un libro
    public void reservarLibro(Reserva reserva) {
        Libro libro = reserva.getLibro();

        // Verificar si hay stock disponible
        if (libro.getStock() > 0) {
            // Reducir el stock en 1
            libro.setStock(libro.getStock() - 1);
            libroRepository.save(libro);  // Guardar el libro con el nuevo stock

            // Establecer la fecha de la reserva y su estado como "Pendiente"
            reserva.setFechaReserva(LocalDate.now());
            reserva.setEstado("Pendiente");

            reservaRepository.save(reserva);  // Guardar la reserva en la base de datos
        } else {
            throw new IllegalStateException("No hay stock disponible para este libro.");
        }
    }

    // Método para rechazar una reserva
    public void rechazarReserva(Long id) {
        Reserva reserva = reservaRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Reserva no encontrada"));
        
        // Devolver el libro a su stock original
        Libro libro = reserva.getLibro();
        libro.setStock(libro.getStock() + 1);  // Incrementar el stock en 1
        libroRepository.save(libro);  // Guardar el libro con el nuevo stock

        // Cambiar el estado de la reserva a "Rechazada"
        reserva.setEstado("Rechazada");
        reservaRepository.save(reserva);  // Guardar la reserva con el nuevo estado
    }

    // Aprobar una reserva


    // Cancelar reservas vencidas
    public void cancelarReservasVencidas() {
        // Obtener todas las reservas
        List<Reserva> todasLasReservas = reservaRepository.findAll();

        // Filtrar las reservas vencidas (condición para vencimiento)
        List<Reserva> reservasVencidas = todasLasReservas.stream()
            .filter(reserva -> reserva.getFechaReserva().isBefore(LocalDate.now()) && "Pendiente".equals(reserva.getEstado()))
            .collect(Collectors.toList());

        // Cambiar el estado de las reservas vencidas a "Cancelada"
        for (Reserva reserva : reservasVencidas) {
            reserva.setEstado("Cancelada");
            reservaRepository.save(reserva);
        }
    }

 // Servicio ReservaService
    public List<Reserva> listarReservas() {
        return reservaRepository.findAll();  // Usamos el método estándar findAll()
    }

}
