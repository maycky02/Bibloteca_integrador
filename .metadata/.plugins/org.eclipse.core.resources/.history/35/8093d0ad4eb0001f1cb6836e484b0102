package com.trilce.Bibloteca.servicios;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.trilce.Bibloteca.Entidades.Libro;
import com.trilce.Bibloteca.repositorio.LibroRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class LibroService {

    private final LibroRepository libroRepository;

    public void agregarLibro(Libro libro, MultipartFile imagen) throws IOException {
        // Si se recibe una imagen en la solicitud
        if (imagen != null && !imagen.isEmpty()) {
            // Nombre del archivo
            String imagenNombre = imagen.getOriginalFilename();
            
            // Dirección de destino donde se almacenará la imagen
            Path pathDestino = Paths.get("src/main/resources/static/imagenes/" + imagenNombre);
            
            // Copia la imagen al directorio de destino
            Files.copy(imagen.getInputStream(), pathDestino, StandardCopyOption.REPLACE_EXISTING);
            
            // Establece el nombre de la imagen en el objeto libro
            libro.setImagen(imagenNombre);  // Guardamos solo el nombre del archivo en el libro
        }

        // Guardar el libro en la base de datos
        libroRepository.save(libro);
    }


    // Método de edición, si es necesario
    public Libro editarLibro(Long id, Libro libroActualizado) {
        Libro libro = libroRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Libro no encontrado"));
        libro.setTitulo(libroActualizado.getTitulo());
        libro.setAutor(libroActualizado.getAutor());
        libro.setFechaPublicacion(libroActualizado.getFechaPublicacion());
        libro.setGenero(libroActualizado.getGenero());
        libro.setSinopsis(libroActualizado.getSinopsis());
        libro.setIsbn(libroActualizado.getIsbn());
        libro.setStock(libroActualizado.getStock());
        return libroRepository.save(libro);
    }

    public void eliminarLibro(Long id) {
        if (!libroRepository.existsById(id)) {
            throw new IllegalArgumentException("Libro no encontrado");
        }
        libroRepository.deleteById(id);
    }

    public List<Libro> listarLibros() {
        return libroRepository.findAll();
    }

    public Optional<Libro> buscarLibroPorId(Long id) {
        return libroRepository.findById(id);
    }

    public void actualizarLibro(Libro libro) {
        libroRepository.save(libro);
    }

    public Libro obtenerLibro(Long id) {
        return libroRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Libro no encontrado con ID: " + id));
    }

    public List<Libro> obtenerTodosLosLibros() {
        return libroRepository.findAll();
    }
}
