package com.trilce.Bibloteca.servicios;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.trilce.Bibloteca.Entidades.Libro;
import com.trilce.Bibloteca.Entidades.Prestamo;
import com.trilce.Bibloteca.Entidades.Reserva;
import com.trilce.Bibloteca.repositorio.LibroRepository;
import com.trilce.Bibloteca.repositorio.PrestamoRepository;
import com.trilce.Bibloteca.repositorio.ReservaRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ReservaService {

    private final ReservaRepository reservaRepository;
    private final LibroRepository libroRepository;  // Asegúrate de tener este repositorio
    private final PrestamoRepository prestamoRepository;
 // Método para reservar un libro
    public String reservarLibro(Reserva reserva) {
        Libro libro = reserva.getLibro();
        Usuario usuario = reserva.getUsuario();

        // Verificar si el usuario tiene una sanción activa
        if (usuario.getFechaSancion() != null && usuario.getFechaSancion().isAfter(LocalDate.now())) {
            // Si el usuario está sancionado, devolver un mensaje con la fecha de fin de la sanción
            return "No puedes realizar una reserva porque tienes una sanción activa hasta el " + usuario.getFechaSancion().toString();
        }

        // Verificar si hay stock disponible
        if (libro.getStock() > 0) {
            // Reducir el stock en 1
            libro.setStock(libro.getStock() - 1);
            libroRepository.save(libro);  // Guardar el libro con el nuevo stock

            // Establecer la fecha de la reserva y su estado como "Pendiente"
            reserva.setFechaReserva(LocalDate.now());
            reserva.setEstado("Pendiente");

            reservaRepository.save(reserva);  // Guardar la reserva en la base de datos
            return "Reserva realizada con éxito.";
        } else {
            return "No hay stock disponible para este libro.";
        }
    }

    // Método para rechazar una reserva
    public void rechazarReserva(Long id) {
        Reserva reserva = reservaRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Reserva no encontrada"));
        
        // Devolver el libro a su stock original
        Libro libro = reserva.getLibro();
        libro.setStock(libro.getStock() + 1);  // Incrementar el stock en 1
        libroRepository.save(libro);  // Guardar el libro con el nuevo stock

        // Cambiar el estado de la reserva a "Rechazada"
        reserva.setEstado("Rechazada");
        reservaRepository.save(reserva);  // Guardar la reserva con el nuevo estado
    }

    public void aprobarReserva(Long reservaId) {
        // Obtener la reserva y actualizar su estado a "Aprobada"
        Reserva reserva = reservaRepository.findById(reservaId)
            .orElseThrow(() -> new IllegalArgumentException("Reserva no encontrada"));
        
        reserva.setEstado("Aprobada");
        reservaRepository.save(reserva);
    }
    

    // Cancelar reservas vencidas
    public void cancelarReservasVencidas() {
        // Obtener todas las reservas
        List<Reserva> todasLasReservas = reservaRepository.findAll();

        // Filtrar las reservas vencidas (condición para vencimiento)
        List<Reserva> reservasVencidas = todasLasReservas.stream()
            .filter(reserva -> reserva.getFechaReserva().isBefore(LocalDate.now()) && "Pendiente".equals(reserva.getEstado()))
            .collect(Collectors.toList());

        // Cambiar el estado de las reservas vencidas a "Cancelada"
        for (Reserva reserva : reservasVencidas) {
            reserva.setEstado("Cancelada");
            reservaRepository.save(reserva);
        }
    }

 // Servicio ReservaService
    public List<Reserva> listarReservas() {
        return reservaRepository.findAll();  // Usamos el método estándar findAll()
    }
    
    
    public void crearPrestamoDesdeReserva(Long reservaId) {
        // Obtener la reserva aprobada
        Reserva reserva = reservaRepository.findById(reservaId)
            .orElseThrow(() -> new IllegalArgumentException("Reserva no encontrada"));

        // Crear un nuevo préstamo basado en la reserva
        Prestamo prestamo = new Prestamo();
        prestamo.setLibro(reserva.getLibro());
        prestamo.setUsuario(reserva.getUsuario());
        prestamo.setFechaPrestamo(LocalDate.now());
        prestamo.setFechaDevolucion(LocalDate.now().plusWeeks(1));  // Prestamo por una semana
        prestamo.setEstado("Activo");

        // Guardar el préstamo en la base de datos
        prestamoRepository.save(prestamo);
    }
}


