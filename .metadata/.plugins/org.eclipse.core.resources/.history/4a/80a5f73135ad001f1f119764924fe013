package com.trilce.Bibloteca.controladores;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.trilce.Bibloteca.Entidades.Cliente;
import com.trilce.Bibloteca.servicios.ClienteService;
@Controller
@RequestMapping("/admin/clientes")
public class ClienteController {

    @Autowired
    private ClienteService clienteService;

    @GetMapping
    public String listarClientes(@RequestParam(required = false) String filtro, Model model) {
        if (filtro != null && !filtro.isEmpty()) {
            model.addAttribute("clientes", clienteService.buscarClientes(filtro));
        } else {
            model.addAttribute("clientes", clienteService.listarClientes());
        }
        return "admin/clientes";
    }

    @PostMapping
    public String guardarCliente(@ModelAttribute Cliente cliente) {
        clienteService.guardarCliente(cliente);
        return "redirect:/admin/clientes";
    }

    @GetMapping("/editar/{id}")
    public String editarCliente(@PathVariable Long id, Model model) {
        Cliente cliente = clienteService.obtenerClientePorId(id);
        model.addAttribute("cliente", cliente);
        return "admin/editarCliente"; // Asegúrate de tener una vista para editar
    }

    @GetMapping("/eliminar/{id}")
    public String eliminarCliente(@PathVariable Long id) {
        clienteService.eliminarCliente(id);
        return "redirect:/admin/clientes";
    }
    @GetMapping("/sancionar/{id}")
    public String sancionarCliente(@PathVariable Long id) {
        clienteService.cambiarSancion(id, true);
        return "redirect:/admin/clientes";
    }

    @GetMapping("/levantar-sancion/{id}")
    public String levantarSancion(@PathVariable Long id) {
        clienteService.cambiarSancion(id, false);
        return "redirect:/admin/clientes";
    }

    @GetMapping("/buscarPorDni")
    public String buscarClientePorDni(@RequestParam String dni, Model model) {
        Cliente cliente = clienteService.buscarClientePorDni(dni);
        if (cliente != null) {
            model.addAttribute("clientes", List.of(cliente)); // Pasar el cliente encontrado a la vista
        } else {
            model.addAttribute("mensaje", "Cliente no encontrado con DNI: " + dni);
            model.addAttribute("clientes", clienteService.listarClientes()); // Mostrar todos los clientes si no se encuentra
        }
        return "admin/clientes"; // Asegúrate de que esta vista maneje el mensaje
    }
}