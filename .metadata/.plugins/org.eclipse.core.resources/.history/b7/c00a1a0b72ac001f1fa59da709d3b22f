package com.trilce.Bibloteca.controladores;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.trilce.Bibloteca.Entidades.Cliente;
import com.trilce.Bibloteca.servicios.ClienteService;


@Controller
@RequestMapping("/admin/clientes")
public class ClienteController {

    @Autowired
    private ClienteService clienteService;

    @GetMapping
    public String listarClientes(@RequestParam(required = false) String filtro, @RequestParam(required = false) Long editarId, Model model) {
        if (filtro != null && !filtro.isEmpty()) {
            model.addAttribute("clientes", clienteService.buscarClientes(filtro));
        } else {
            model.addAttribute("clientes", clienteService.listarClientes());
        }

        // Si se pasa un editarId, carga el cliente para editarlo
        if (editarId != null) {
            Cliente cliente = clienteService.obtenerClientePorId(editarId);
            model.addAttribute("clienteEdicion", cliente);
        }

        return "admin/clientes"; // Página que lista los clientes
    }
    @PostMapping
    public String guardarCliente(Cliente cliente) {
        clienteService.guardarCliente(cliente);
        return "redirect:/admin/clientes";
    }

    @GetMapping("/editar/{id}")
    @GetMapping("/editar/{id}")
    public String editarCliente(@PathVariable Long id, Model model) {
        // Obtener el cliente a editar
        Cliente cliente = clienteService.obtenerClientePorId(id);

        // Si no se encuentra el cliente, redirigir al listado
        if (cliente == null) {
            return "redirect:/admin/clientes";
        }

        // Agregar el cliente al modelo para que esté disponible en la vista
        model.addAttribute("cliente", cliente);
        return "admin/editar-cliente"; // Página dedicada a editar el cliente
    }


    @PostMapping("/editar/{id}")
    public String actualizarCliente(@PathVariable Long id, Cliente cliente) {
        cliente.setId(id);
        clienteService.guardarCliente(cliente);
        return "redirect:/admin/clientes"; // Redirigir después de guardar
    }

    @GetMapping("/eliminar/{id}")
    public String eliminarCliente(@PathVariable Long id) {
        clienteService.eliminarCliente(id);
        return "redirect:/admin/clientes";
    }

    @GetMapping("/sancionar/{id}")
    public String sancionarCliente(@PathVariable Long id) {
        clienteService.cambiarSancion(id, true);
        return "redirect:/admin/clientes";
    }

    @GetMapping("/levantar-sancion/{id}")
    public String levantarSancion(@PathVariable Long id) {
        clienteService.cambiarSancion(id, false);
        return "redirect:/admin/clientes";
    }
}